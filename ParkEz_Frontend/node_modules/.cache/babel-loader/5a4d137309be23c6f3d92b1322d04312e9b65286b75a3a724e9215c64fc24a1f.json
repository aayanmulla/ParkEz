{"ast":null,"code":"var _jsxFileName = \"/Users/karanpaigude/Desktop/Projects/Aayan Project/NewProject/ParkEz_Frontend/src/screens/Bookings/Bookings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Bookings.css\";\nimport Navbar from \"../NavBar/NavBar\";\nimport Reservation from \"../Reservations/Reservation\";\nimport Footer from \"../Footer/Footer\";\nimport { FaCalendarAlt } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Bookings = () => {\n  _s();\n  const [parkingSlots, setParkingSlots] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [bookedSlotId] = useState(null);\n  const [selectedSlotId, setSelectedSlotId] = useState(null);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const datePickerRef = useRef(null);\n\n  // Close date picker when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (datePickerRef.current && !datePickerRef.current.contains(event.target)) {\n        setShowDatePicker(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n  const toggleDatePicker = () => {\n    setShowDatePicker(!showDatePicker);\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    setShowDatePicker(false);\n    setSelectedSlotId(null);\n    setSelectedTimeSlot(\"\");\n  };\n  const fetchAllData = async () => {\n    setLoading(true);\n    try {\n      // Fetch all data concurrently\n      const [parkingRes, latestRes, reservedRes] = await Promise.all([fetch(\"http://localhost:5001/api/parking/slots\"), fetch(\"http://localhost:5001/api/slots/latest-booked-slot\"), fetch(\"http://localhost:5001/api/reserved/slots\")]);\n\n      // Check if all responses are OK\n      if (!parkingRes.ok || !latestRes.ok || !reservedRes.ok) {\n        throw new Error(\"Failed to fetch one or more data sources\");\n      }\n\n      // Convert responses to JSON\n      const parkingData = await parkingRes.json();\n      const latestData = await latestRes.json();\n      const reservedData = await reservedRes.json();\n\n      // Extract values\n      const parkingSlots = parkingData.parkingSlots || [];\n      const reservedSlots = reservedData.parkingSlots || [];\n      const latestBookedSlotId = latestData.latestBookedSlotId;\n\n      // Create a Map of reserved slots for quick lookup\n      const reservedMap = new Map(reservedSlots.map(slot => [slot.id, slot]));\n\n      // Merge the slot data ensuring reserved slots take priority\n      const updatedSlots = parkingSlots.map(slot => {\n        if (reservedMap.has(slot.id)) {\n          return reservedMap.get(slot.id); // Use reserved slot data\n        }\n        return slot; // Otherwise, keep existing parking slot data\n      });\n\n      // If latestBookedSlotId exists, mark it as occupied\n      if (latestBookedSlotId) {\n        const slotIndex = updatedSlots.findIndex(slot => slot.id === latestBookedSlotId);\n        if (slotIndex !== -1) {\n          updatedSlots[slotIndex] = {\n            ...updatedSlots[slotIndex],\n            isOccupied: true,\n            status: \"occupied\"\n          };\n        } else {\n          // If latest booked slot isn't in parking slots, add it\n          updatedSlots.push({\n            id: latestBookedSlotId,\n            isOccupied: true,\n            status: \"occupied\"\n          });\n        }\n      }\n\n      // Set the updated slots in state\n      setParkingSlots(updatedSlots);\n      return updatedSlots; // Return the slots for use in other functions\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setError(error.message);\n      return []; // Return empty array as fallback\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch all data on mount & refresh every 3 minutes\n  useEffect(() => {\n    fetchAllData();\n    const interval = setInterval(fetchAllData, 180000);\n    return () => clearInterval(interval);\n  }, []);\n  const handlePayment = async slotId => {\n    // Use selected date or current date if not selected\n    const bookingDate = selectedDate || new Date();\n    if (!selectedTimeSlot) {\n      alert(\"Please select a time slot before proceeding with payment.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_8aHz8s9WnoELui\",\n      amount: 500 * 100,\n      currency: \"INR\",\n      name: \"ParkEz\",\n      description: `Parking Slot Payment: ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`,\n      handler: async function (response) {\n        try {\n          console.log(\"Payment Successful:\", response);\n\n          // Send booking details to the backend\n          const slotRes = await fetch(`http://localhost:5001/api/reserved/${slotId}`, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify({\n              isOccupied: true,\n              paymentId: response.razorpay_payment_id,\n              timeSlot: selectedTimeSlot,\n              bookingDate: bookingDate.toISOString().split('T')[0] // Send date in YYYY-MM-DD format\n            })\n          });\n          if (!slotRes.ok) {\n            throw new Error('Failed to update slot status');\n          }\n          await fetchAllData();\n          alert(`Payment successful! Your slot has been reserved for ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`);\n        } catch (error) {\n          console.error(\"Payment processing error:\", error);\n          alert(\"Payment succeeded but error updating reservation. Contact support.\");\n        }\n      },\n      prefill: {\n        name: \"Aayan Mulla\",\n        email: \"aayanmulla10@gmail.com\",\n        contact: \"7083076077\"\n      },\n      theme: {\n        color: \"#3399cc\"\n      }\n    };\n    try {\n      const rzp1 = new window.Razorpay(options);\n      rzp1.open();\n    } catch (error) {\n      console.error(\"Error opening payment dialog:\", error);\n      alert(\"Failed to initialize payment. Please try again.\");\n    }\n  };\n\n  // const handleDateChange = (date) => {\n  //     setSelectedDate(date);\n  //     // Reset selected slot and time slot when date changes\n  //     setSelectedSlotId(null);\n  //     setSelectedTimeSlot(\"\");\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bookings-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"bookings-heading\",\n        children: \"Ajeenkya DY Patil Parking Zone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading parking slots...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-date-picker-container\",\n          ref: datePickerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-icon-container\",\n            onClick: toggleDatePicker,\n            children: [/*#__PURE__*/_jsxDEV(FaCalendarAlt, {\n              className: \"calendar-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 33\n            }, this), selectedDate && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"selected-date\",\n              children: selectedDate.toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this), showDatePicker && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-picker-dropdown\",\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: selectedDate,\n              onChange: handleDateChange,\n              minDate: new Date(),\n              inline: true,\n              calendarClassName: \"dropdown-calendar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookings-grid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Reservation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n_s(Bookings, \"3w4l68n93Me/hv7XNtlH26tVGSQ=\");\n_c = Bookings;\nexport default Bookings;\nvar _c;\n$RefreshReg$(_c, \"Bookings\");","map":{"version":3,"names":["React","useEffect","useState","useRef","DatePicker","Navbar","Reservation","Footer","FaCalendarAlt","jsxDEV","_jsxDEV","Bookings","_s","parkingSlots","setParkingSlots","loading","setLoading","error","setError","bookedSlotId","selectedSlotId","setSelectedSlotId","selectedTimeSlot","setSelectedTimeSlot","selectedDate","setSelectedDate","showDatePicker","setShowDatePicker","datePickerRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","toggleDatePicker","handleDateChange","date","fetchAllData","parkingRes","latestRes","reservedRes","Promise","all","fetch","ok","Error","parkingData","json","latestData","reservedData","reservedSlots","latestBookedSlotId","reservedMap","Map","map","slot","id","updatedSlots","has","get","slotIndex","findIndex","isOccupied","status","push","console","message","interval","setInterval","clearInterval","handlePayment","slotId","bookingDate","Date","alert","options","key","amount","currency","name","description","toLocaleDateString","handler","response","log","slotRes","method","headers","localStorage","getItem","body","JSON","stringify","paymentId","razorpay_payment_id","timeSlot","toISOString","split","prefill","email","contact","theme","color","rzp1","window","Razorpay","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","selected","onChange","minDate","inline","calendarClassName","_c","$RefreshReg$"],"sources":["/Users/karanpaigude/Desktop/Projects/Aayan Project/NewProject/ParkEz_Frontend/src/screens/Bookings/Bookings.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Bookings.css\";\nimport Navbar from \"../NavBar/NavBar\";\nimport Reservation from \"../Reservations/Reservation\";\nimport Footer from \"../Footer/Footer\";\nimport { FaCalendarAlt } from \"react-icons/fa\";\n\nconst Bookings = () => {\n    const [parkingSlots, setParkingSlots] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [bookedSlotId] = useState(null);\n    const [selectedSlotId, setSelectedSlotId] = useState(null);\n    const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\"); \n    const [selectedDate, setSelectedDate] = useState(null);\n    const [showDatePicker, setShowDatePicker] = useState(false);\n    const datePickerRef = useRef(null);\n\n    // Close date picker when clicking outside\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (datePickerRef.current && !datePickerRef.current.contains(event.target)) {\n                setShowDatePicker(false);\n            }\n        };\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, []);\n\n    const toggleDatePicker = () => {\n        setShowDatePicker(!showDatePicker);\n    };\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n        setShowDatePicker(false);\n        setSelectedSlotId(null);\n        setSelectedTimeSlot(\"\");\n    };\n\n\n    const fetchAllData = async () => {\n        setLoading(true);\n        try {\n            // Fetch all data concurrently\n            const [parkingRes, latestRes, reservedRes] = await Promise.all([\n                fetch(\"http://localhost:5001/api/parking/slots\"),\n                fetch(\"http://localhost:5001/api/slots/latest-booked-slot\"),\n                fetch(\"http://localhost:5001/api/reserved/slots\"),\n            ]);\n    \n            // Check if all responses are OK\n            if (!parkingRes.ok || !latestRes.ok || !reservedRes.ok) {\n                throw new Error(\"Failed to fetch one or more data sources\");\n            }\n    \n            // Convert responses to JSON\n            const parkingData = await parkingRes.json();\n            const latestData = await latestRes.json();\n            const reservedData = await reservedRes.json();\n    \n            // Extract values\n            const parkingSlots = parkingData.parkingSlots || [];\n            const reservedSlots = reservedData.parkingSlots || [];\n            const latestBookedSlotId = latestData.latestBookedSlotId;\n    \n            // Create a Map of reserved slots for quick lookup\n            const reservedMap = new Map(reservedSlots.map(slot => [slot.id, slot]));\n    \n            // Merge the slot data ensuring reserved slots take priority\n            const updatedSlots = parkingSlots.map(slot => {\n                if (reservedMap.has(slot.id)) {\n                    return reservedMap.get(slot.id); // Use reserved slot data\n                }\n                return slot; // Otherwise, keep existing parking slot data\n            });\n    \n            // If latestBookedSlotId exists, mark it as occupied\n            if (latestBookedSlotId) {\n                const slotIndex = updatedSlots.findIndex(slot => slot.id === latestBookedSlotId);\n                if (slotIndex !== -1) {\n                    updatedSlots[slotIndex] = {\n                        ...updatedSlots[slotIndex],\n                        isOccupied: true,\n                        status: \"occupied\",\n                    };\n                } else {\n                    // If latest booked slot isn't in parking slots, add it\n                    updatedSlots.push({\n                        id: latestBookedSlotId,\n                        isOccupied: true,\n                        status: \"occupied\",\n                    });\n                }\n            }\n    \n            // Set the updated slots in state\n            setParkingSlots(updatedSlots);\n            return updatedSlots; // Return the slots for use in other functions\n        } catch (error) {\n            console.error(\"Error fetching data:\", error);\n            setError(error.message);\n            return []; // Return empty array as fallback\n        } finally {\n            setLoading(false);\n        }\n    };\n    \n    // Fetch all data on mount & refresh every 3 minutes\n    useEffect(() => {\n        fetchAllData();\n        const interval = setInterval(fetchAllData, 180000);\n        return () => clearInterval(interval);\n    }, []);\n    \n    const handlePayment = async (slotId) => {\n        // Use selected date or current date if not selected\n        const bookingDate = selectedDate || new Date();\n    \n        if (!selectedTimeSlot) {\n            alert(\"Please select a time slot before proceeding with payment.\");\n            return;\n        }\n    \n        const options = {\n            key: \"rzp_test_8aHz8s9WnoELui\",\n            amount: 500 * 100, \n            currency: \"INR\",\n            name: \"ParkEz\",\n            description: `Parking Slot Payment: ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`,\n            handler: async function (response) {\n                try {\n                    console.log(\"Payment Successful:\", response);\n    \n                    // Send booking details to the backend\n                    const slotRes = await fetch(`http://localhost:5001/api/reserved/${slotId}`, {\n                        method: \"PATCH\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n                        },\n                        body: JSON.stringify({\n                            isOccupied: true,\n                            paymentId: response.razorpay_payment_id,\n                            timeSlot: selectedTimeSlot,\n                            bookingDate: bookingDate.toISOString().split('T')[0] // Send date in YYYY-MM-DD format\n                        }),\n                    });\n    \n                    if (!slotRes.ok) {\n                        throw new Error('Failed to update slot status');\n                    }\n    \n                    await fetchAllData();\n                    alert(`Payment successful! Your slot has been reserved for ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`);\n                } catch (error) {\n                    console.error(\"Payment processing error:\", error);\n                    alert(\"Payment succeeded but error updating reservation. Contact support.\");\n                }\n            },\n            prefill: {\n                name: \"Aayan Mulla\",\n                email: \"aayanmulla10@gmail.com\",\n                contact: \"7083076077\"\n            },\n            theme: {\n                color: \"#3399cc\"\n            }\n        };\n    \n        try {\n            const rzp1 = new window.Razorpay(options);\n            rzp1.open();\n        } catch (error) {\n            console.error(\"Error opening payment dialog:\", error);\n            alert(\"Failed to initialize payment. Please try again.\");\n        }\n    };\n\n    // const handleDateChange = (date) => {\n    //     setSelectedDate(date);\n    //     // Reset selected slot and time slot when date changes\n    //     setSelectedSlotId(null);\n    //     setSelectedTimeSlot(\"\");\n    // };\n\n    return (\n        <div className=\"bookings-container\">\n            <Navbar />\n            <div className=\"bookings-content\">\n                <h1 className=\"bookings-heading\">Ajeenkya DY Patil Parking Zone</h1>\n\n                {loading ? (\n                    <p>Loading parking slots...</p>\n                ) : error ? (\n                    <p className=\"error-message\">{error}</p>\n                ) : (\n                    <div>\n                        {/* Custom Date Picker */}\n                        <div className=\"custom-date-picker-container\" ref={datePickerRef}>\n                            <div className=\"calendar-icon-container\" onClick={toggleDatePicker}>\n                                <FaCalendarAlt className=\"calendar-icon\" />\n                                {selectedDate && (\n                                    <span className=\"selected-date\">\n                                        {selectedDate.toLocaleDateString()}\n                                    </span>\n                                )}\n                            </div>\n                            \n                            {showDatePicker && (\n                                <div className=\"date-picker-dropdown\">\n                                    <DatePicker\n                                        selected={selectedDate}\n                                        onChange={handleDateChange}\n                                        minDate={new Date()}\n                                        inline\n                                        calendarClassName=\"dropdown-calendar\"\n                                    />\n                                </div>\n                            )}\n                        </div>\n\n                        {/* Rest of your existing JSX remains the same */}\n                        <div className=\"bookings-grid\">\n                            {/* ... */}\n                        </div>\n                    </div>\n                )}\n            </div>\n            <Reservation />\n            <Footer />\n        </div>\n    );\n};\n\nexport default Bookings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}