{"ast":null,"code":"var _jsxFileName = \"/Users/karanpaigude/Desktop/Projects/Aayan Project/NewProject/ParkEz_Frontend/src/screens/Bookings/Bookings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Bookings.css\";\nimport Navbar from \"../NavBar/NavBar\";\nimport Reservation from \"../Reservations/Reservation\";\nimport Footer from \"../Footer/Footer\";\nimport { FaCalendarAlt } from \"react-icons/fa\"; // Import calendar icon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Bookings = () => {\n  _s();\n  const [parkingSlots, setParkingSlots] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [bookedSlotId] = useState(null);\n  const [selectedSlotId, setSelectedSlotId] = useState(null);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(null);\n\n  // Custom input component that shows calendar icon and selected date\n  const CustomDateInput = /*#__PURE__*/React.forwardRef(({\n    value,\n    onClick\n  }, ref) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-date-input\",\n    onClick: onClick,\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(FaCalendarAlt, {\n      className: \"calendar-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), value && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"selected-date\",\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this));\n  const fetchAllData = async () => {\n    setLoading(true);\n    try {\n      // Fetch all data concurrently\n      const [parkingRes, latestRes, reservedRes] = await Promise.all([fetch(\"http://localhost:5001/api/parking/slots\"), fetch(\"http://localhost:5001/api/slots/latest-booked-slot\"), fetch(\"http://localhost:5001/api/reserved/slots\")]);\n\n      // Check if all responses are OK\n      if (!parkingRes.ok || !latestRes.ok || !reservedRes.ok) {\n        throw new Error(\"Failed to fetch one or more data sources\");\n      }\n\n      // Convert responses to JSON\n      const parkingData = await parkingRes.json();\n      const latestData = await latestRes.json();\n      const reservedData = await reservedRes.json();\n\n      // Extract values\n      const parkingSlots = parkingData.parkingSlots || [];\n      const reservedSlots = reservedData.parkingSlots || [];\n      const latestBookedSlotId = latestData.latestBookedSlotId;\n\n      // Create a Map of reserved slots for quick lookup\n      const reservedMap = new Map(reservedSlots.map(slot => [slot.id, slot]));\n\n      // Merge the slot data ensuring reserved slots take priority\n      const updatedSlots = parkingSlots.map(slot => {\n        if (reservedMap.has(slot.id)) {\n          return reservedMap.get(slot.id); // Use reserved slot data\n        }\n        return slot; // Otherwise, keep existing parking slot data\n      });\n\n      // If latestBookedSlotId exists, mark it as occupied\n      if (latestBookedSlotId) {\n        const slotIndex = updatedSlots.findIndex(slot => slot.id === latestBookedSlotId);\n        if (slotIndex !== -1) {\n          updatedSlots[slotIndex] = {\n            ...updatedSlots[slotIndex],\n            isOccupied: true,\n            status: \"occupied\"\n          };\n        } else {\n          // If latest booked slot isn't in parking slots, add it\n          updatedSlots.push({\n            id: latestBookedSlotId,\n            isOccupied: true,\n            status: \"occupied\"\n          });\n        }\n      }\n\n      // Set the updated slots in state\n      setParkingSlots(updatedSlots);\n      return updatedSlots; // Return the slots for use in other functions\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setError(error.message);\n      return []; // Return empty array as fallback\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch all data on mount & refresh every 3 minutes\n  useEffect(() => {\n    fetchAllData();\n    const interval = setInterval(fetchAllData, 180000);\n    return () => clearInterval(interval);\n  }, []);\n  const handlePayment = async slotId => {\n    const bookingDate = selectedDate || new Date();\n    if (!selectedTimeSlot) {\n      alert(\"Please select a time slot before proceeding with payment.\");\n      return;\n    }\n    const options = {\n      key: \"rzp_test_8aHz8s9WnoELui\",\n      amount: 500 * 100,\n      currency: \"INR\",\n      name: \"ParkEz\",\n      description: `Parking Slot Payment: ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`,\n      handler: async function (response) {\n        try {\n          console.log('Booking slotId:', slotId);\n          console.log('Token:', localStorage.getItem('token'));\n          const slotRes = await fetch(`http://localhost:5001/api/reserved/${slotId}`, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n            },\n            body: JSON.stringify({\n              isOccupied: true,\n              paymentId: response.razorpay_payment_id,\n              timeSlot: selectedTimeSlot,\n              bookedAt: bookingDate.toISOString(),\n              status: 'occupied'\n            })\n          });\n          if (!slotRes.ok) {\n            const errorText = await slotRes.text();\n            console.error('Server response:', slotRes.status, errorText);\n            throw new Error('Failed to update slot status');\n          }\n          await fetchAllData();\n          alert(`Payment successful! Your slot has been reserved for ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`);\n        } catch (error) {\n          console.error(\"Payment processing error:\", error);\n          alert(\"Payment succeeded but error updating reservation. Contact support.\");\n        }\n      },\n      prefill: {\n        name: \"Aayan Mulla\",\n        email: \"aayanmulla10@gmail.com\",\n        contact: \"7083076077\"\n      },\n      theme: {\n        color: \"#3399cc\"\n      }\n    };\n    try {\n      const rzp1 = new window.Razorpay(options);\n      rzp1.open();\n    } catch (error) {\n      console.error(\"Error opening payment dialog:\", error);\n      alert(\"Failed to initialize payment. Please try again.\");\n    }\n  };\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    // Reset selected slot and time slot when date changes\n    setSelectedSlotId(null);\n    setSelectedTimeSlot(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bookings-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"bookings-heading\",\n        children: \"Ajeenkya DY Patil Parking Zone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading parking slots...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-picker-container\",\n          children: /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: selectedDate,\n            onChange: handleDateChange,\n            minDate: new Date(),\n            customInput: /*#__PURE__*/_jsxDEV(CustomDateInput, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 46\n            }, this),\n            dateFormat: \"MMMM d, yyyy\",\n            placeholderText: \"\",\n            withPortal: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bookings-grid\",\n          children: parkingSlots.map(slot => {\n            const isOccupied = slot.isOccupied || bookedSlotId === slot.id;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `parking-slot ${slot.isOccupied === null ? \"under-construction\" : isOccupied ? \"occupied\" : \"available\"}`,\n              onClick: () => {\n                if (!slot.isOccupied && slot.isOccupied !== null) {\n                  setSelectedSlotId(slot.id);\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Slot \", slot.id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: slot.isOccupied === null ? \"Under Construction\" : isOccupied ? \"Occupied\" : \"Available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 41\n              }, this), selectedSlotId === slot.id && !isOccupied && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"time-slot-selection\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Select Time Slot:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: selectedTimeSlot,\n                  onChange: e => setSelectedTimeSlot(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"-- Select --\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 234,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"9 AM - 12 PM\",\n                    children: \"9 AM - 12 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 235,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"12 PM - 3 PM\",\n                    children: \"12 PM - 3 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"3 PM - 6 PM\",\n                    children: \"3 PM - 6 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"6 PM - 9 PM\",\n                    children: \"6 PM - 9 PM\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 238,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handlePayment(slot.id),\n                  children: \"Book Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 45\n              }, this)]\n            }, slot.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Reservation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n};\n_s(Bookings, \"IQFSBtCB8IE7ngEcugCj0x0lfQc=\");\n_c = Bookings;\nexport default Bookings;\nvar _c;\n$RefreshReg$(_c, \"Bookings\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","Navbar","Reservation","Footer","FaCalendarAlt","jsxDEV","_jsxDEV","Bookings","_s","parkingSlots","setParkingSlots","loading","setLoading","error","setError","bookedSlotId","selectedSlotId","setSelectedSlotId","selectedTimeSlot","setSelectedTimeSlot","selectedDate","setSelectedDate","CustomDateInput","forwardRef","value","onClick","ref","className","children","fileName","_jsxFileName","lineNumber","columnNumber","fetchAllData","parkingRes","latestRes","reservedRes","Promise","all","fetch","ok","Error","parkingData","json","latestData","reservedData","reservedSlots","latestBookedSlotId","reservedMap","Map","map","slot","id","updatedSlots","has","get","slotIndex","findIndex","isOccupied","status","push","console","message","interval","setInterval","clearInterval","handlePayment","slotId","bookingDate","Date","alert","options","key","amount","currency","name","description","toLocaleDateString","handler","response","log","localStorage","getItem","slotRes","method","headers","body","JSON","stringify","paymentId","razorpay_payment_id","timeSlot","bookedAt","toISOString","errorText","text","prefill","email","contact","theme","color","rzp1","window","Razorpay","open","handleDateChange","date","selected","onChange","minDate","customInput","dateFormat","placeholderText","withPortal","e","target","_c","$RefreshReg$"],"sources":["/Users/karanpaigude/Desktop/Projects/Aayan Project/NewProject/ParkEz_Frontend/src/screens/Bookings/Bookings.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./Bookings.css\";\nimport Navbar from \"../NavBar/NavBar\";\nimport Reservation from \"../Reservations/Reservation\";\nimport Footer from \"../Footer/Footer\";\nimport { FaCalendarAlt } from \"react-icons/fa\"; // Import calendar icon\n\nconst Bookings = () => {\n    const [parkingSlots, setParkingSlots] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [bookedSlotId] = useState(null);\n    const [selectedSlotId, setSelectedSlotId] = useState(null);\n    const [selectedTimeSlot, setSelectedTimeSlot] = useState(\"\"); \n    const [selectedDate, setSelectedDate] = useState(null); \n\n    // Custom input component that shows calendar icon and selected date\n    const CustomDateInput = React.forwardRef(({ value, onClick }, ref) => (\n        <div className=\"custom-date-input\" onClick={onClick} ref={ref}>\n            <FaCalendarAlt className=\"calendar-icon\" />\n            {value && <span className=\"selected-date\">{value}</span>}\n        </div>\n    ));\n\n    const fetchAllData = async () => {\n        setLoading(true);\n        try {\n            // Fetch all data concurrently\n            const [parkingRes, latestRes, reservedRes] = await Promise.all([\n                fetch(\"http://localhost:5001/api/parking/slots\"),\n                fetch(\"http://localhost:5001/api/slots/latest-booked-slot\"),\n                fetch(\"http://localhost:5001/api/reserved/slots\"),\n            ]);\n    \n            // Check if all responses are OK\n            if (!parkingRes.ok || !latestRes.ok || !reservedRes.ok) {\n                throw new Error(\"Failed to fetch one or more data sources\");\n            }\n    \n            // Convert responses to JSON\n            const parkingData = await parkingRes.json();\n            const latestData = await latestRes.json();\n            const reservedData = await reservedRes.json();\n    \n            // Extract values\n            const parkingSlots = parkingData.parkingSlots || [];\n            const reservedSlots = reservedData.parkingSlots || [];\n            const latestBookedSlotId = latestData.latestBookedSlotId;\n    \n            // Create a Map of reserved slots for quick lookup\n            const reservedMap = new Map(reservedSlots.map(slot => [slot.id, slot]));\n    \n            // Merge the slot data ensuring reserved slots take priority\n            const updatedSlots = parkingSlots.map(slot => {\n                if (reservedMap.has(slot.id)) {\n                    return reservedMap.get(slot.id); // Use reserved slot data\n                }\n                return slot; // Otherwise, keep existing parking slot data\n            });\n    \n            // If latestBookedSlotId exists, mark it as occupied\n            if (latestBookedSlotId) {\n                const slotIndex = updatedSlots.findIndex(slot => slot.id === latestBookedSlotId);\n                if (slotIndex !== -1) {\n                    updatedSlots[slotIndex] = {\n                        ...updatedSlots[slotIndex],\n                        isOccupied: true,\n                        status: \"occupied\",\n                    };\n                } else {\n                    // If latest booked slot isn't in parking slots, add it\n                    updatedSlots.push({\n                        id: latestBookedSlotId,\n                        isOccupied: true,\n                        status: \"occupied\",\n                    });\n                }\n            }\n    \n            // Set the updated slots in state\n            setParkingSlots(updatedSlots);\n            return updatedSlots; // Return the slots for use in other functions\n        } catch (error) {\n            console.error(\"Error fetching data:\", error);\n            setError(error.message);\n            return []; // Return empty array as fallback\n        } finally {\n            setLoading(false);\n        }\n    };\n    \n    // Fetch all data on mount & refresh every 3 minutes\n    useEffect(() => {\n        fetchAllData();\n        const interval = setInterval(fetchAllData, 180000);\n        return () => clearInterval(interval);\n    }, []);\n    \n    const handlePayment = async (slotId) => {\n        const bookingDate = selectedDate || new Date();\n    \n        if (!selectedTimeSlot) {\n            alert(\"Please select a time slot before proceeding with payment.\");\n            return;\n        }\n    \n        const options = {\n            key: \"rzp_test_8aHz8s9WnoELui\",\n            amount: 500 * 100,\n            currency: \"INR\",\n            name: \"ParkEz\",\n            description: `Parking Slot Payment: ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`,\n            handler: async function (response) {\n                try {\n                    console.log('Booking slotId:', slotId);\n                    console.log('Token:', localStorage.getItem('token'));\n                    const slotRes = await fetch(`http://localhost:5001/api/reserved/${slotId}`, {\n                        method: \"PATCH\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n                        },\n                        body: JSON.stringify({\n                            isOccupied: true,\n                            paymentId: response.razorpay_payment_id,\n                            timeSlot: selectedTimeSlot,\n                            bookedAt: bookingDate.toISOString(),\n                            status: 'occupied'\n                        }),\n                    });\n    \n                    if (!slotRes.ok) {\n                        const errorText = await slotRes.text();\n                        console.error('Server response:', slotRes.status, errorText);\n                        throw new Error('Failed to update slot status');\n                    }\n    \n                    await fetchAllData();\n                    alert(`Payment successful! Your slot has been reserved for ${bookingDate.toLocaleDateString()} ${selectedTimeSlot}`);\n                } catch (error) {\n                    console.error(\"Payment processing error:\", error);\n                    alert(\"Payment succeeded but error updating reservation. Contact support.\");\n                }\n            },\n            prefill: {\n                name: \"Aayan Mulla\",\n                email: \"aayanmulla10@gmail.com\",\n                contact: \"7083076077\"\n            },\n            theme: {\n                color: \"#3399cc\"\n            }\n        };\n    \n        try {\n            const rzp1 = new window.Razorpay(options);\n            rzp1.open();\n        } catch (error) {\n            console.error(\"Error opening payment dialog:\", error);\n            alert(\"Failed to initialize payment. Please try again.\");\n        }\n    };\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date);\n        // Reset selected slot and time slot when date changes\n        setSelectedSlotId(null);\n        setSelectedTimeSlot(\"\");\n    };\n\n    return (\n        <div className=\"bookings-container\">\n            <Navbar />\n            <div className=\"bookings-content\">\n                <h1 className=\"bookings-heading\">Ajeenkya DY Patil Parking Zone</h1>\n\n                {loading ? (\n                    <p>Loading parking slots...</p>\n                ) : error ? (\n                    <p className=\"error-message\">{error}</p>\n                ) : (\n                    <div>\n                        {/* Date Picker - now with just a calendar icon */}\n                        <div className=\"date-picker-container\">\n                            <DatePicker\n                                selected={selectedDate}\n                                onChange={handleDateChange}\n                                minDate={new Date()}\n                                customInput={<CustomDateInput />}\n                                dateFormat=\"MMMM d, yyyy\"\n                                placeholderText=\"\"\n                                withPortal\n                            />\n                        </div>\n\n                        <div className=\"bookings-grid\">\n                            {parkingSlots.map((slot) => {\n                                const isOccupied = slot.isOccupied || bookedSlotId === slot.id;\n                    \n                                return (\n                                    <div\n                                        key={slot.id}\n                                        className={`parking-slot ${\n                                            slot.isOccupied === null\n                                                ? \"under-construction\"\n                                                : isOccupied\n                                                ? \"occupied\"\n                                                : \"available\"\n                                        }`}\n                                        onClick={() => {\n                                            if (!slot.isOccupied && slot.isOccupied !== null) {\n                                                setSelectedSlotId(slot.id);\n                                            }\n                                        }}\n                                    >\n                                        <span>Slot {slot.id}</span>\n                                        <span>\n                                            {slot.isOccupied === null\n                                                ? \"Under Construction\"\n                                                : isOccupied\n                                                ? \"Occupied\"\n                                                : \"Available\"}\n                                        </span>\n                    \n                                        {selectedSlotId === slot.id && !isOccupied && (\n                                            <div className=\"time-slot-selection\">\n                                                <label>Select Time Slot:</label>\n                                                <select\n                                                    value={selectedTimeSlot}\n                                                    onChange={(e) => setSelectedTimeSlot(e.target.value)}\n                                                >\n                                                    <option value=\"\">-- Select --</option>\n                                                    <option value=\"9 AM - 12 PM\">9 AM - 12 PM</option>\n                                                    <option value=\"12 PM - 3 PM\">12 PM - 3 PM</option>\n                                                    <option value=\"3 PM - 6 PM\">3 PM - 6 PM</option>\n                                                    <option value=\"6 PM - 9 PM\">6 PM - 9 PM</option>\n                                                </select>\n                                                <button onClick={() => handlePayment(slot.id)}>Book Now</button>\n                                            </div>\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                )}\n            </div>\n            <Reservation />\n            <Footer />\n        </div>\n    );\n};\n\nexport default Bookings;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}